version: "3.7"
services:
    producer:
        container_name: producer
        build:
            context: .
            dockerfile: ./docker/golang/Dockerfile
            args:
                - APP=producer
        image: producer:latest
        restart: always
        depends_on:
            - kafka1
        volumes:
            - "./app/:/go/src/app"
        env_file:
            - "./app/configs/app.env"
            - "./docker/cassandra/cassandra.env"
    consumer:
        container_name: consumer
        build:
            context: .
            dockerfile: ./docker/golang/Dockerfile
            args:
                - APP=consumer
        image: consumer:latest
        restart: always
        depends_on:
            - cassandra
            - kafka1
        volumes:
            - "./app/:/go/src/app"
        env_file:
            - "./app/configs/app.env"
            - "./docker/cassandra/cassandra.env"
    cassandra:
        container_name: cassandra
        build:
            context: .
            dockerfile: ./docker/cassandra/Dockerfile
        image: cassandratweet:latest
        restart: always
        env_file: "./docker/cassandra/cassandra.env"
        environment:
            - CASSANDRA_SEEDS=cassandra,cassandra2,cassandra3
    cassandra2:
        container_name: cassandra2
        build:
            context: .
            dockerfile: ./docker/cassandra/Dockerfile
        image: cassandratweet:latest
        restart: always
        env_file: "./docker/cassandra/cassandra.env"
        environment:
            - CASSANDRA_SEEDS=cassandra,cassandra2,cassandra3
    cassandra3:
        container_name: cassandra3
        build:
            context: .
            dockerfile: ./docker/cassandra/Dockerfile
        image: cassandratweet:latest
        restart: always
        env_file: "./docker/cassandra/cassandra.env"
        environment:
            - CASSANDRA_SEEDS=cassandra,cassandra2,cassandra3
    zookeeper:
        container_name: zookeeper
        build:
            context: .
            dockerfile: ./docker/zookeeper/Dockerfile
        image: zookeepertweet:latest
        ports:
            - "2181:2181"
    kafka1:
        container_name: kafka1
        build:
            context: .
            dockerfile: "./docker/kafka/Dockerfile"
        image: kafkatweet:latest
        depends_on:
            - zookeeper
        restart: always
        ports:
            - "9092:9092"
        environment:
          KAFKA_ADVERTISED_HOST_NAME: 192.168.99.120
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CREATE_TOPICS: "Tweets:1:3:compact"
          KAFKA_MESSAGE_MAX_BYTES: 1000000
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
    kafka2:
        container_name: kafka2
        build:
            context: .
            dockerfile: "./docker/kafka/Dockerfile"
        image: kafkatweet:latest
        depends_on:
            - zookeeper
        restart: always
        ports:
            - "9093:9092"
        environment:
          KAFKA_ADVERTISED_HOST_NAME: 192.168.99.120
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_MESSAGE_MAX_BYTES: 1000000
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
    kafka3:
        container_name: kafka3
        build:
            context: .
            dockerfile: "./docker/kafka/Dockerfile"
        image: kafkatweet:latest
        depends_on:
            - zookeeper
        restart: always
        ports:
            - "9094:9092"
        environment:
          KAFKA_ADVERTISED_HOST_NAME: 192.168.99.120
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_MESSAGE_MAX_BYTES: 1000000
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

